# -*- coding: utf-8 -*-
"""Maternal Health risk

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1528FOfvWR053bob6Z1W3fij60ku152cD
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#Load data
url = 'https://raw.githubusercontent.com/Kaju-barnwal/DataSets/refs/heads/main/Maternal%20Health%20Risk%20Data%20Set.csv'
data = pd.read_csv(url)

data.head(10)

data.info()

"""Checking the dataset distribution"""

data.describe()

data['RiskLevel'].unique()

data['RiskLevel'].value_counts()/len(data)

data['RiskLevel'].value_counts().plot.pie(autopct='%.2f',figsize=(8,8))

"""Seperating dependent and independent variable"""

X=data.drop(columns=['RiskLevel'])
Y=data['RiskLevel']

print(X.shape)
print(Y.shape)

sns.pairplot(data,hue='RiskLevel')

plt.figure(figsize=(15,6))
sns.countplot(x='Age', hue='RiskLevel', data=data)

numerical_data = data.select_dtypes(include=[np.number])
correlation = numerical_data.corr()

plt.figure(figsize=(12,8))
sns.heatmap(correlation, xticklabels=correlation.columns, yticklabels=correlation.columns, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Numerical Features')
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(data=data, x='DiastolicBP', y='SystolicBP', hue='RiskLevel')
plt.title("DiastolicBP vs SystolicBP by RiskLevel")
plt.show()

sns.scatterplot(x='RiskLevel', y='BS', hue='RiskLevel', data=data)
plt.show()

sns.scatterplot(x='Age', y='BS', hue='RiskLevel', data=data)
plt.title("Age vs Blood Sugar by RiskLevel")
plt.show()

fig, axes = plt.subplots(1, 2, figsize=(14,6))

# SystolicBP
sns.boxplot(x="RiskLevel", y="SystolicBP", data=data, ax=axes[0], palette="Set2")
axes[0].set_title("Distribution based on SystolicBP")

# DiastolicBP
sns.boxplot(x="RiskLevel", y="DiastolicBP", data=data, ax=axes[1], palette="Set3")
axes[1].set_title("Distribution based on DiastolicBP")

plt.tight_layout()
plt.show()

"""Scaling the dataset"""

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaled_X=scaler.fit_transform(X)

"""Splitting the dataset

"""

from sklearn.model_selection import train_test_split as tts
x_train,x_test,y_train,y_test=tts(scaled_X,Y,train_size=0.70,stratify=Y,random_state=101)
x_train.shape,x_test.shape,y_train.shape,y_test.shape

print(x_train.size)
print(x_test.size)

"""Model Building, predictions and odds ratio

Logistic Regression
"""

from sklearn.linear_model import LogisticRegression as LR
classifier=LR(class_weight='balanced')
classifier.fit(x_train,y_train)
predicted_values=classifier.predict(x_test)
predicted_probabilities=classifier.predict_proba(x_test)
predicted_values
predicted_probabilities,predicted_probabilities.shape

print(y_train.shape)
print(predicted_values.shape)
print(y_test.shape)

"""1. Confusion matrix(Logistic Regression)"""

from sklearn.metrics import confusion_matrix
cf=confusion_matrix(y_test,predicted_values)
cf

classifier.score(x_test,y_test)

from sklearn.metrics import precision_recall_fscore_support as PRF_summary
precision,recall,f1,support=PRF_summary(y_test,predicted_values)

print(precision)
print(recall)
print(f1)
print(support)

sns.heatmap(confusion_matrix(y_test,predicted_values),annot=True)

from sklearn.metrics import classification_report
k=classification_report(y_test,predicted_values)
print(k)

"""Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()

model.fit(x_train, y_train)

pred= model.predict(x_test)

sns.heatmap(confusion_matrix(y_test,pred),annot=True)

model.score(x_test,y_test)

print(classification_report(y_test,pred))

from sklearn.preprocessing import StandardScaler
scale = StandardScaler()
x_train= scale.fit_transform(x_train)
x_test= scale.transform(x_test)

x_train

modelDTC= DecisionTreeClassifier(criterion='gini', random_state=101)
modelDTC.fit(x_train, y_train)

y_pred= modelDTC.predict(x_test)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=modelDTC.classes_)
disp.plot(cmap="gist_ncar")
plt.title("Confusion Matrix - Decision Tree")
plt.show()

modelDTC.score(x_test,y_test)

print(classification_report(y_test,y_pred))

"""Random Forest"""

from sklearn.ensemble import RandomForestClassifier

RF= RandomForestClassifier(criterion='gini')
RF.fit(x_train,y_train)

predict=RF.predict(x_test)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
cm = confusion_matrix(y_test, predict)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=RF.classes_)
disp.plot(cmap="gist_stern")
plt.title("Confusion Matrix - Random Forest")
plt.show()

RF.score(x_test,y_test)

print(classification_report(y_test,predict))

RF2= RandomForestClassifier(criterion='entropy',max_depth=30,max_features='sqrt',n_estimators=500)

RF2.fit(x_train,y_train)

rf_pred=RF2.predict(x_test)

rf_pred=RF2.predict(x_test)

print(classification_report(y_test,rf_pred))

# Confusion Matrix for RF2
cm2 = confusion_matrix(y_test, rf_pred)
disp2 = ConfusionMatrixDisplay(confusion_matrix=cm2, display_labels=RF2.classes_)
disp2.plot(cmap="RdYlBu")
plt.title("Confusion Matrix - Random Forest (Entropy)")
plt.show()

"""Support Vector Classification"""

from sklearn.svm import SVC

svc= SVC(kernel='poly')
svc.fit(x_train,y_train)

svc_pred=svc.predict(x_test)

print(classification_report(y_test,svc_pred))

svc.score(x_test,y_test)

# Confusion matrix
cm = confusion_matrix(y_test, svc_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=svc.classes_)
disp.plot(cmap="flare_r")
plt.title("Confusion Matrix - SVC (Poly Kernel)")
plt.show()

